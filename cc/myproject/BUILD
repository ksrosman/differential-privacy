licenses(["notice"])  # Apache v2.0


cc_binary(
    name = "newcount",
    srcs = ["newcount.cpp"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_cc_differential_privacy//algorithms:bounded-mean",
        "@com_google_cc_differential_privacy//algorithms:bounded-sum",
        "@com_google_cc_differential_privacy//algorithms:count",
        "@com_google_cc_differential_privacy//algorithms:order-statistics",
        "@com_google_cc_differential_privacy//base:statusor",
        "@com_google_differential_privacy//proto:data_cc_proto",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_cc_differential_privacy//algorithms:util",
        "@com_google_cc_differential_privacy//proto:util-lib",
        "@com_google_differential_privacy//proto:confidence_interval_cc_proto",
        "@com_google_googletest//:gtest_main",
        "@com_google_absl//absl/memory",
        "@com_google_cc_differential_privacy//algorithms:algorithm",
        "@com_google_cc_differential_privacy//algorithms:numerical-mechanisms",
        "@com_google_cc_differential_privacy//algorithms:numerical-mechanisms-testing",
        "@com_google_absl//absl/random:distributions",
        "@com_google_cc_differential_privacy//base:status",
        "@com_google_cc_differential_privacy//testing:sequence",
        "@com_google_cc_differential_privacy//testing:stochastic_tester",
    ],
)

cc_binary(
    name = "CreateSample",
    srcs = ["CreateSample.cc"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_cc_differential_privacy//algorithms:bounded-mean",
        "@com_google_cc_differential_privacy//algorithms:bounded-sum",
        "@com_google_cc_differential_privacy//algorithms:count",
        "@com_google_cc_differential_privacy//algorithms:order-statistics",
        "@com_google_cc_differential_privacy//base:statusor",
        "@com_google_differential_privacy//proto:data_cc_proto",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_cc_differential_privacy//algorithms:util",
        "@com_google_cc_differential_privacy//proto:util-lib",
        "@com_google_differential_privacy//proto:confidence_interval_cc_proto",
        "@com_google_googletest//:gtest_main",
        "@com_google_absl//absl/memory",
        "@com_google_cc_differential_privacy//algorithms:algorithm",
        "@com_google_cc_differential_privacy//algorithms:numerical-mechanisms",
        "@com_google_cc_differential_privacy//algorithms:numerical-mechanisms-testing",
        "@com_google_absl//absl/random:distributions",
        "@com_google_cc_differential_privacy//base:status",
        "@com_google_cc_differential_privacy//testing:sequence",
    ],
)

cc_binary(
    name = "LargeSamples",
    srcs = ["LargeSamples.cc"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_cc_differential_privacy//algorithms:bounded-mean",
        "@com_google_cc_differential_privacy//algorithms:bounded-sum",
        "@com_google_cc_differential_privacy//algorithms:count",
        "@com_google_cc_differential_privacy//algorithms:order-statistics",
        "@com_google_cc_differential_privacy//base:statusor",
        "@com_google_differential_privacy//proto:data_cc_proto",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_cc_differential_privacy//algorithms:util",
        "@com_google_cc_differential_privacy//proto:util-lib",
        "@com_google_differential_privacy//proto:confidence_interval_cc_proto",
        "@com_google_googletest//:gtest_main",
        "@com_google_absl//absl/memory",
        "@com_google_cc_differential_privacy//algorithms:algorithm",
        "@com_google_cc_differential_privacy//algorithms:numerical-mechanisms",
        "@com_google_cc_differential_privacy//algorithms:numerical-mechanisms-testing",
        "@com_google_absl//absl/random:distributions",
        "@com_google_cc_differential_privacy//base:status",
        "@com_google_cc_differential_privacy//testing:sequence",
    ],
    copts = ['-fopenmp'],
)

cc_binary(
    name = "CountWithInsufficientNoise",
    srcs = ["CountWithInsufficientNoise.cc"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_cc_differential_privacy//algorithms:bounded-mean",
        "@com_google_cc_differential_privacy//algorithms:bounded-sum",
        "@com_google_cc_differential_privacy//algorithms:count",
        "@com_google_cc_differential_privacy//algorithms:order-statistics",
        "@com_google_cc_differential_privacy//base:statusor",
        "@com_google_differential_privacy//proto:data_cc_proto",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_cc_differential_privacy//algorithms:util",
        "@com_google_cc_differential_privacy//proto:util-lib",
        "@com_google_differential_privacy//proto:confidence_interval_cc_proto",
        "@com_google_googletest//:gtest_main",
        "@com_google_absl//absl/memory",
        "@com_google_cc_differential_privacy//algorithms:algorithm",
        "@com_google_cc_differential_privacy//algorithms:numerical-mechanisms",
        "@com_google_cc_differential_privacy//algorithms:numerical-mechanisms-testing",
        "@com_google_absl//absl/random:distributions",
        "@com_google_cc_differential_privacy//base:status",
        "@com_google_cc_differential_privacy//testing:sequence",
        "@com_google_cc_differential_privacy//testing:stochastic_tester",
    ],
)

cc_binary(
    name = "BoundedSumWithInsufficientNoise",
    srcs = ["BoundedSumWithInsufficientNoise.cc"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_cc_differential_privacy//algorithms:bounded-mean",
        "@com_google_cc_differential_privacy//algorithms:bounded-sum",
        "@com_google_cc_differential_privacy//algorithms:count",
        "@com_google_cc_differential_privacy//algorithms:order-statistics",
        "@com_google_cc_differential_privacy//base:statusor",
        "@com_google_differential_privacy//proto:data_cc_proto",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_cc_differential_privacy//algorithms:util",
        "@com_google_cc_differential_privacy//proto:util-lib",
        "@com_google_differential_privacy//proto:confidence_interval_cc_proto",
        "@com_google_googletest//:gtest_main",
        "@com_google_absl//absl/memory",
        "@com_google_cc_differential_privacy//algorithms:algorithm",
        "@com_google_cc_differential_privacy//algorithms:numerical-mechanisms",
        "@com_google_cc_differential_privacy//algorithms:numerical-mechanisms-testing",
        "@com_google_absl//absl/random:distributions",
        "@com_google_cc_differential_privacy//base:status",
        "@com_google_cc_differential_privacy//testing:sequence",
        "@com_google_cc_differential_privacy//testing:stochastic_tester",
    ],
)


cc_binary(
    name = "BoundedMeanWithInsufficientNoise",
    srcs = ["BoundedMeanWithInsufficientNoise.cc"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_cc_differential_privacy//algorithms:bounded-mean",
        "@com_google_cc_differential_privacy//algorithms:bounded-sum",
        "@com_google_cc_differential_privacy//algorithms:count",
        "@com_google_cc_differential_privacy//algorithms:order-statistics",
        "@com_google_cc_differential_privacy//base:statusor",
        "@com_google_differential_privacy//proto:data_cc_proto",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_cc_differential_privacy//algorithms:util",
        "@com_google_cc_differential_privacy//proto:util-lib",
        "@com_google_differential_privacy//proto:confidence_interval_cc_proto",
        "@com_google_googletest//:gtest_main",
        "@com_google_absl//absl/memory",
        "@com_google_cc_differential_privacy//algorithms:algorithm",
        "@com_google_cc_differential_privacy//algorithms:numerical-mechanisms",
        "@com_google_cc_differential_privacy//algorithms:numerical-mechanisms-testing",
        "@com_google_absl//absl/random:distributions",
        "@com_google_cc_differential_privacy//base:status",
        "@com_google_cc_differential_privacy//testing:sequence",
        "@com_google_cc_differential_privacy//testing:stochastic_tester",
    ],
)

cc_binary(
    name = "dpcount",
    srcs = ["dpcount.cpp"],
    deps = [
        "@com_google_absl//absl/strings",
        "@com_google_cc_differential_privacy//algorithms:bounded-mean",
        "@com_google_cc_differential_privacy//algorithms:bounded-sum",
        "@com_google_cc_differential_privacy//algorithms:count",
        "@com_google_cc_differential_privacy//algorithms:order-statistics",
        "@com_google_cc_differential_privacy//base:statusor",
        "@com_google_differential_privacy//proto:data_cc_proto",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_cc_differential_privacy//algorithms:util",
        "@com_google_cc_differential_privacy//proto:util-lib",
        "@com_google_differential_privacy//proto:confidence_interval_cc_proto",
        "@com_google_googletest//:gtest_main",
        "@com_google_absl//absl/memory",
        "@com_google_cc_differential_privacy//algorithms:algorithm",
        "@com_google_cc_differential_privacy//algorithms:numerical-mechanisms",
        "@com_google_absl//absl/random:distributions",
        "@com_google_cc_differential_privacy//base:status",
        "@com_google_cc_differential_privacy//testing:sequence",
    ],
)

cc_test(
    name = "trial_test",
    size = "small",
    timeout = "short",
    srcs = ["trial_test.cpp"],
    copts = ["-Wno-sign-compare"],
    deps = [
        "@com_google_cc_differential_privacy//testing:stochastic_tester",
        "@com_google_googletest//:gtest_main",
        "@com_google_cc_differential_privacy//algorithms:bounded-sum",
        "@com_google_cc_differential_privacy//algorithms:count",
        "@com_google_cc_differential_privacy//algorithms:numerical-mechanisms",
        "@com_google_cc_differential_privacy//algorithms:numerical-mechanisms-testing",
        "@com_google_absl//absl/random:distributions",
    ],
)